// Package transform coordinate between earth(WGS-84) and mars in china(GCJ-02).
package gcj02

import (
	"math"
)

const x_pi = math.Pi * 3000.0 / 180.0

func WGStoBD(lat, lon float64) (bd_lat, bd_lon float64) {
	x, y := WGStoGCJ(lat, lon)
	z := math.Sqrt(x*x+y*y) + 0.00002*math.Sin(y*x_pi)
	theta := math.Atan2(y, x) + 0.000003*math.Cos(x*x_pi)
	bd_lon = z*math.Cos(theta) + 0.0065
	bd_lat = z*math.Sin(theta) + 0.006
	return
}

/*

void bd_decrypt(double bd_lat, double bd_lon, double &gg_lat, double &gg_lon)
{
    double x = bd_lon - 0.0065, y = bd_lat - 0.006
    double z = sqrt(x * x + y * y) - 0.00002 * sin(y * x_math.Pi)
    double theta = atan2(y, x) - 0.000003 * cos(x * x_math.Pi)
    gg_lon = z * cos(theta)
    gg_lat = z * sin(theta)
}
*/

//
// Krasovsky 1940
//
// a = 6378245.0, 1/f = 298.3
// b = a * (1 - f)
// ee = (a^2 - b^2) / a^2
const a = 6378245.0
const ee = 0.00669342162296594323

//
// World Geodetic System ==> Mars Geodetic System
func WGStoGCJ(wgLat, wgLon float64) (mgLat, mgLon float64) {
	if outOfChina(wgLat, wgLon) {
		mgLat = wgLat
		mgLon = wgLon
		return
	}
	dLat := transformLat(wgLon-105.0, wgLat-35.0)
	dLon := transformLon(wgLon-105.0, wgLat-35.0)
	radLat := wgLat / 180.0 * math.Pi
	magic := math.Sin(radLat)
	magic = 1 - ee*magic*magic
	sqrtMagic := math.Sqrt(magic)
	dLat = (dLat * 180.0) / ((a * (1 - ee)) / (magic * sqrtMagic) * math.Pi)
	dLon = (dLon * 180.0) / (a / sqrtMagic * math.Cos(radLat) * math.Pi)
	mgLat = wgLat + dLat
	mgLon = wgLon + dLon
	return
}

func outOfChina(lat, lon float64) bool {
	if lon < 72.004 || lon > 137.8347 {
		return true
	}
	if lat < 0.8293 || lat > 55.8271 {
		return true
	}

	return false
}

func transformLat(x, y float64) float64 {
	ret := -100.0 + 2.0*x + 3.0*y + 0.2*y*y + 0.1*x*y + 0.2*math.Sqrt(math.Abs(x))
	ret += (20.0*math.Sin(6.0*x*math.Pi) + 20.0*math.Sin(2.0*x*math.Pi)) * 2.0 / 3.0
	ret += (20.0*math.Sin(y*math.Pi) + 40.0*math.Sin(y/3.0*math.Pi)) * 2.0 / 3.0
	ret += (160.0*math.Sin(y/12.0*math.Pi) + 320*math.Sin(y*math.Pi/30.0)) * 2.0 / 3.0
	return ret
}

func transformLon(x, y float64) float64 {
	ret := 300.0 + x + 2.0*y + 0.1*x*x + 0.1*x*y + 0.1*math.Sqrt(math.Abs(x))
	ret += (20.0*math.Sin(6.0*x*math.Pi) + 20.0*math.Sin(2.0*x*math.Pi)) * 2.0 / 3.0
	ret += (20.0*math.Sin(x*math.Pi) + 40.0*math.Sin(x/3.0*math.Pi)) * 2.0 / 3.0
	ret += (150.0*math.Sin(x/12.0*math.Pi) + 300.0*math.Sin(x/30.0*math.Pi)) * 2.0 / 3.0
	return ret
}
