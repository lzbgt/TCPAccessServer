package database

import (
	"database/sql"
	. "lbsas/datatypes"
	"lbsas/utils"
	"strconv"

	log "github.com/Sirupsen/logrus"

	_ "github.com/go-sql-driver/mysql"
)

type DbHelper struct {
	db       *sql.DB
	ImeiToId map[string]string
	IdToImei map[string]string
}

func (s *DbHelper) SetDb(db *sql.DB) {
	s.db = db
}

func (s *DbHelper) Close() {
	if s.db != nil {
		s.db.Close()
		s.db = nil
	}
}

func (s *DbHelper) GetImeiById(id string) (string, error) {
	if imei, ok := s.IdToImei[id]; ok {
		return imei, nil
	} else {
		rows, err := s.db.Query("select id, deviceImei from device where id=?", id)
		if err != nil {
			log.Fatal(err, id)
		}

		defer rows.Close()
		var (
			id         string
			deviceImei string
		)
		if rows.Next() {
			err := rows.Scan(&id, &deviceImei)
			if err != nil {
				log.Fatal(err)
			}
			s.IdToImei[id] = deviceImei
			s.ImeiToId[deviceImei] = id
		} else {
			return "no such device", sql.ErrNoRows
		}
		err = rows.Err()
		if err != nil {
			log.Fatal(err)
		}
		return deviceImei, nil
	}
}

func (s *DbHelper) GetIdByImei(imei string) (string, error) {
	if id, ok := s.ImeiToId[imei]; ok {
		return id, nil
	} else {
		rows, err := s.db.Query("select id, deviceImei from device where deviceImei=?", id)
		if err != nil {
			log.Fatal(err, imei)
		}

		defer rows.Close()
		var (
			id         string
			deviceImei string
		)
		if rows.Next() {
			err := rows.Scan(&id, &deviceImei)
			if err != nil {
				log.Fatal(err)
			}
			s.IdToImei[id] = deviceImei
			s.ImeiToId[deviceImei] = id
		} else {
			return "no such device", sql.ErrNoRows
		}

		return id, rows.Err()
	}
}

func (s *DbHelper) SaveEventData(repo *MessageResp) error {

	id, err := s.GetIdByImei(string(repo.UID))
	if err != nil {
		log.Error(err)
		return err
	} else {
		log.Debug(id)
	}

	tm := utils.GetTimestampFromString(repo.GPSUTime).UnixNano() / 1000000
	log.Debug(strconv.FormatInt(tm, 10))

	stmt, err := s.db.Prepare(`INSERT INTO eventdata(deviceId, timestamp, 
	     latitude, longitude, speed, heading) VALUES(?,?,?,?,?,?)`)
	if err != nil {
		log.Fatal(err)
	}
	res, err := stmt.Exec(id, tm, repo.Latitude, repo.Longitude, repo.Speed, repo.Azimuth)
	if err != nil {
		log.Fatal(err)
	}

	lastId, err := res.LastInsertId()
	if err != nil {
		log.Fatal(err)
	}
	rowCnt, err := res.RowsAffected()
	if err != nil {
		log.Fatal(err)
	}
	log.Debug("ID = %d, affected = %d\n", lastId, rowCnt)
	return nil
}

//deviceId, lastAckTime, latitude,longitude ,speed ,heading ,gpsTimestamp ,updateTime
func (s *DbHelper) InsertUpdateLatestData(repo *MessageResp) {

}

//user:password@tcp(127.0.0.1:3306)/hello
func New(conf string, logLevel log.Level) (*DbHelper, error) {
	log.SetLevel(logLevel)
	log.SetFormatter(&log.TextFormatter{})

	helper := &DbHelper{IdToImei: make(map[string]string), ImeiToId: make(map[string]string)}
	db, err := sql.Open("mysql", conf)
	helper.SetDb(db)

	//populate maps
	rows, err := db.Query("select id, deviceImei from device")
	if err != nil {
		log.Fatal(err)
	}

	defer rows.Close()
	var (
		id         string
		deviceImei string
	)
	for rows.Next() {
		err := rows.Scan(&id, &deviceImei)
		if err != nil {
			log.Fatal(err)
		}
		log.Debug(id, deviceImei)
		helper.IdToImei[id] = deviceImei
		helper.ImeiToId[deviceImei] = id
	}
	err = rows.Err()
	if err != nil {
		log.Fatal(err)
	}

	return helper, err
}
